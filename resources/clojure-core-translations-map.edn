{"es"
 {"clojure.core"
  {"agent"
   {:arglists ([state & options]),
    :resolved true,
    :existing "agent",
    :alias "agencia",
    :docstring "",
    :comment "or agente"},
   "and"
   {:macro true,
    :arglists ([] [x] [x & next]),
    :resolved true,
    :existing "and",
    :alias "y"},
   "apply"
   {:arglists
    ([f args]
     [f x args]
     [f x y args]
     [f x y z args]
     [f a b c d & args]),
    :resolved true,
    :existing "apply",
    :alias "aplica"},
   "atom"
   {:arglists ([x] [x & options]),
    :resolved true,
    :existing "atom",
    :alias "átomo"},
   "boolean"
   {:arglists ([x]),
    :resolved true,
    :existing "boolean",
    :alias "booleano",
    :docstring "",
    :comment
    "sounds like English but couldn't find a more specific word"},
   "butlast"
   {:arglists ([coll]),
    :resolved true,
    :existing "butlast",
    :alias "pero-último",
    :docstring "",
    :comment "not sure of what this should communicate."},
   "concat"
   {:arglists ([] [x] [x y] [x y & zs]),
    :resolved true,
    :existing "concat",
    :alias "social"},
   "cond"
   {:macro true,
    :arglists ([& clauses]),
    :resolved true,
    :existing "cond",
    :alias "dependela",
    :docstring "",
    :comment "means \"depending on the ...\" --> dependiendo de la"},
   "count"
   {:arglists ([coll]),
    :resolved true,
    :existing "count",
    :alias "cuenta"},
   "dec"
   {:arglists ([x]),
    :resolved true,
    :existing "dec",
    :alias "extracto",
    :docstring "",
    :comment
    "based soley on translation. need more info/context to decide what connotations/denotations would be best"},
   "do" {:special-form true, :existing "do", :alias "haz"},
   "doall"
   {:arglists ([coll] [n coll]),
    :resolved true,
    :existing "doall",
    :alias "haztodo",
    :docstring "",
    :comment "literally means do it all"},
   "dorun"
   {:arglists ([coll] [n coll]),
    :resolved true,
    :existing "dorun",
    :alias "hazcorrer",
    :docstring "",
    :comment "could also just use \"haz\" meaning \"do\""},
   "doseq"
   {:macro true,
    :arglists ([seq-exprs & body]),
    :resolved true,
    :existing "doseq",
    :alias "hazsec"},
   "drop"
   {:arglists ([n] [n coll]),
    :resolved true,
    :existing "drop",
    :alias "baja"},
   "drop-while"
   {:arglists ([pred] [pred coll]),
    :resolved true,
    :existing "drop-while",
    :alias "baja-mientras"},
   "every?"
   {:arglists ([pred coll]),
    :resolved true,
    :existing "every?",
    :alias "cada?"},
   "false" {:special-form true, :existing "false", :alias "falso"},
   "false?"
   {:arglists ([x]),
    :resolved true,
    :existing "false?",
    :alias "falso?"},
   "filter"
   {:arglists ([pred] [pred coll]),
    :resolved true,
    :existing "filter",
    :alias "forma"},
   "find"
   {:arglists ([map key]),
    :resolved true,
    :existing "find",
    :alias "encuentra"},
   "first"
   {:arglists ([coll]),
    :resolved true,
    :existing "first",
    :alias "primero"},
   "flatten"
   {:arglists ([x]),
    :resolved true,
    :existing "flatten",
    :alias "aplana"},
   "for"
   {:macro true,
    :arglists ([seq-exprs body-expr]),
    :resolved true,
    :existing "for",
    :alias "para",
    :docstring "",
    :comment "could be por"},
   "get"
   {:arglists ([map key] [map key not-found]),
    :resolved true,
    :existing "get",
    :alias "consigue"},
   "hash-map"
   {:arglists ([] [& keyvals]),
    :resolved true,
    :existing "hash-map",
    :alias "hachís-mapa"},
   "hash-set"
   {:arglists ([] [& keys]),
    :resolved true,
    :existing "hash-set",
    :alias "hachís-pone",
    :docstring "",
    :comment "could use fijo or colocar as \"set\""},
   "identity"
   {:arglists ([x]),
    :resolved true,
    :existing "identity",
    :alias "identidad"},
   "if" {:special-form true, :existing "if", :alias "si"},
   "if-not"
   {:macro true,
    :arglists ([test then] [test then else]),
    :resolved true,
    :existing "if-not",
    :alias "si-no"},
   "inc"
   {:arglists ([x]),
    :resolved true,
    :existing "inc",
    :alias "carga",
    :docstring "",
    :comment "translated to \"load\" in english"},
   "interpose"
   {:arglists ([sep] [sep coll]),
    :resolved true,
    :existing "interpose",
    :alias "interpone"},
   "keep"
   {:arglists ([f] [f coll]),
    :resolved true,
    :existing "keep",
    :alias "guardar"},
   "last"
   {:arglists ([coll]),
    :resolved true,
    :existing "last",
    :alias "último"},
   "let"
   {:macro true,
    :special-form true,
    :arglists ([bindings & body]),
    :resolved true,
    :existing "let",
    :alias "deja"},
   "list"
   {:arglists ([& items]),
    :resolved true,
    :existing "list",
    :alias "enumera"},
   "loop"
   {:macro true,
    :special-form true,
    :arglists ([bindings & body]),
    :resolved true,
    :existing "loop",
    :alias "darvuelta",
    :docstring "",
    :comment "actually two words \"dar vuelta\""},
   "map"
   {:arglists
    ([f] [f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]),
    :resolved true,
    :existing "map",
    :alias "mapa"},
   "next"
   {:arglists ([coll]),
    :resolved true,
    :existing "next",
    :alias "próximo",
    :docstring "",
    :comment "this is used in the present"},
   "not"
   {:arglists ([x]), :resolved true, :existing "not", :alias "no"},
   "or"
   {:macro true,
    :arglists ([] [x] [x & next]),
    :resolved true,
    :existing "or",
    :alias "o"},
   "print"
   {:arglists ([& more]),
    :resolved true,
    :existing "print",
    :alias "imprime"},
   "println"
   {:arglists ([& more]),
    :resolved true,
    :existing "println",
    :alias "imprimeln",
    :docstring "",
    :comment "ln means \"line\" in English"},
   "range"
   {:arglists ([] [end] [start end] [start end step]),
    :resolved true,
    :existing "range",
    :alias "gama"},
   "remove"
   {:arglists ([pred] [pred coll]),
    :resolved true,
    :existing "remove",
    :alias "quita"},
   "rest"
   {:arglists ([coll]),
    :resolved true,
    :existing "rest",
    :alias "lodemás",
    :docstring "",
    :comment
    "should we separate the words into \"lo demás\" or shorten it to \"demás\"? Could also use \"el resto\""},
   "reverse"
   {:arglists ([coll]),
    :resolved true,
    :existing "reverse",
    :alias "invierte"},
   "second"
   {:arglists ([x]),
    :resolved true,
    :existing "second",
    :alias "segundo"},
   "seq"
   {:arglists ([coll]),
    :resolved true,
    :existing "seq",
    :alias "sec",
    :docstring "",
    :comment "short for \"secuenciar\""},
   "set"
   {:arglists ([coll]),
    :resolved true,
    :existing "set",
    :alias "pone"},
   "slurp"
   {:arglists ([f & opts]),
    :resolved true,
    :existing "slurp",
    :alias "ventosa",
    :docstring "",
    :comment "if this should be a verb"},
   "some"
   {:arglists ([pred coll]),
    :resolved true,
    :existing "some",
    :alias "alguno"},
   "spit"
   {:arglists ([f content & options]),
    :resolved true,
    :existing "spit",
    :alias "escupe",
    :docstring "",
    :comment "could be \"saliva\" if it's not an action"},
   "str"
   {:arglists ([] [x] [x & ys]),
    :resolved true,
    :existing "str",
    :alias "crd",
    :docstring "",
    :comment "short for \"cuerda\" which translates to string"},
   "take"
   {:arglists ([n] [n coll]),
    :resolved true,
    :existing "take",
    :alias "toma"},
   "take-while"
   {:arglists ([pred] [pred coll]),
    :resolved true,
    :existing "take-while",
    :alias "toma-mientras"},
   "true" {:special-form true, :existing "true", :alias "cierto"},
   "true?"
   {:arglists ([x]),
    :resolved true,
    :existing "true?",
    :alias "cierto?"},
   "when"
   {:macro true,
    :arglists ([test & body]),
    :resolved true,
    :existing "when",
    :alias "cuando"},
   "when-not"
   {:macro true,
    :arglists ([test & body]),
    :resolved true,
    :existing "when-not",
    :alias "cuando-no"}}},
 "id"
 {"clojure.core"
  {"aget"
   {:arglists ([array idx] [array idx & idxs]),
    :resolved true,
    :special-form true,
    :existing "aget",
    :alias "amendapatkan"},
   "and"
   {:macro true,
    :arglists ([] [x] [x & next]),
    :resolved true,
    :existing "and",
    :alias "dan"},
   "apply"
   {:arglists
    ([f args]
     [f x args]
     [f x y args]
     [f x y z args]
     [f a b c d & args]),
    :resolved true,
    :existing "apply",
    :alias "menerapkan"},
   "aset"
   {:arglists ([array idx val] [array idx idx2 & idxv]),
    :resolved true,
    :special-form true,
    :existing "aset",
    :alias "amengatur"},
   "assoc"
   {:arglists ([map key val] [map key val & kvs]),
    :resolved true,
    :existing "assoc",
    :alias "rekan"},
   "def" {:special-form true, :existing "def", :alias "menetapkan"},
   "defn"
   {:macro true,
    :arglists
    ([name doc-string? attr-map? [params*] prepost-map? body]
     [name
      doc-string?
      attr-map?
      ([params*] prepost-map? body)
      +
      attr-map?]),
    :resolved true,
    :special-form true,
    :existing "defn",
    :alias "dfungsi"},
   "fn"
   {:macro true,
    :special-form true,
    :arglists ([& sigs]),
    :resolved true,
    :existing "fn",
    :alias "fungsi"},
   "if" {:special-form true, :existing "if", :alias "jika"},
   "let"
   {:macro true,
    :special-form true,
    :arglists ([bindings & body]),
    :resolved true,
    :existing "let",
    :alias "membiarkan"},
   "repeatedly"
   {:arglists ([f] [n f]),
    :resolved true,
    :existing "repeatedly",
    :alias "berkali-kali"}}},
 "ko"
 {"clojure.core"
  {"aget"
   {:arglists ([array idx] [array idx & idxs]),
    :resolved true,
    :special-form true,
    :existing "aget",
    :alias "배열을얻을",
    :docstring "fun , "},
   "and"
   {:macro true,
    :arglists ([] [x] [x & next]),
    :resolved true,
    :existing "and",
    :alias "과"},
   "apply"
   {:arglists
    ([f args]
     [f x args]
     [f x y args]
     [f x y z args]
     [f a b c d & args]),
    :resolved true,
    :existing "apply",
    :alias "대다"},
   "aset"
   {:arglists ([array idx val] [array idx idx2 & idxv]),
    :resolved true,
    :special-form true,
    :existing "aset",
    :alias "세트"},
   "assoc"
   {:arglists ([map key val] [map key val & kvs]),
    :resolved true,
    :existing "assoc",
    :alias "동무"},
   "def" {:special-form true, :existing "def", :alias "밝히다"},
   "defn"
   {:macro true,
    :arglists
    ([name doc-string? attr-map? [params*] prepost-map? body]
     [name
      doc-string?
      attr-map?
      ([params*] prepost-map? body)
      +
      attr-map?]),
    :resolved true,
    :special-form true,
    :existing "defn",
    :alias "함수를정의"},
   "fn"
   {:macro true,
    :special-form true,
    :arglists ([& sigs]),
    :resolved true,
    :existing "fn",
    :alias "기능"},
   "if" {:special-form true, :existing "if", :alias "만약"},
   "let"
   {:macro true,
    :special-form true,
    :arglists ([bindings & body]),
    :resolved true,
    :existing "let",
    :alias "방해"},
   "repeatedly"
   {:arglists ([f] [n f]),
    :resolved true,
    :existing "repeatedly",
    :alias "자꾸"}}},
 "ta"
 {"clojure.core"
  {"and"
   {:macro true,
    :arglists ([] [x] [x & next]),
    :resolved true,
    :existing "and",
    :alias "மற்றும்"},
   "apply"
   {:arglists
    ([f args]
     [f x args]
     [f x y args]
     [f x y z args]
     [f a b c d & args]),
    :resolved true,
    :existing "apply",
    :alias "செயல்படுத்து"},
   "atom"
   {:arglists ([x] [x & options]),
    :resolved true,
    :existing "atom",
    :alias "அணு"},
   "boolean"
   {:arglists ([x]),
    :resolved true,
    :existing "boolean",
    :alias "பூலியன்"},
   "butlast"
   {:arglists ([coll]),
    :resolved true,
    :existing "butlast",
    :alias "கடைசியின்றி"},
   "concat"
   {:arglists ([] [x] [x y] [x y & zs]),
    :resolved true,
    :existing "concat",
    :alias "தொடு"},
   "cond"
   {:macro true,
    :arglists ([& clauses]),
    :resolved true,
    :existing "cond",
    :alias "பொறுத்து"},
   "count"
   {:arglists ([coll]),
    :resolved true,
    :existing "count",
    :alias "எண்ணு"},
   "dec"
   {:arglists ([x]), :resolved true, :existing "dec", :alias "இறக்கு"},
   "def" {:special-form true, :existing "def", :alias "வரையறு"},
   "defn"
   {:macro true,
    :arglists
    ([name doc-string? attr-map? [params*] prepost-map? body]
     [name
      doc-string?
      attr-map?
      ([params*] prepost-map? body)
      +
      attr-map?]),
    :resolved true,
    :special-form true,
    :existing "defn",
    :alias "வரையறு-செயல்கூறு"},
   "do" {:special-form true, :existing "do", :alias "செய்"},
   "doall"
   {:arglists ([coll] [n coll]),
    :resolved true,
    :existing "doall",
    :alias "செய்யெல்லாம்"},
   "dorun"
   {:arglists ([coll] [n coll]),
    :resolved true,
    :existing "dorun",
    :alias "செய்யோட்டம்"},
   "doseq"
   {:macro true,
    :arglists ([seq-exprs & body]),
    :resolved true,
    :existing "doseq",
    :alias "செய்வரிசை"},
   "drop"
   {:arglists ([n] [n coll]),
    :resolved true,
    :existing "drop",
    :alias "விடு"},
   "drop-while"
   {:arglists ([pred] [pred coll]),
    :resolved true,
    :existing "drop-while",
    :alias "விடு-என்னும்வரை"},
   "every?"
   {:arglists ([pred coll]),
    :resolved true,
    :existing "every?",
    :alias "ஒவ்வொன்றுமா?"},
   "false" {:special-form true, :existing "false", :alias "பொய்மை"},
   "false?"
   {:arglists ([x]),
    :resolved true,
    :existing "false?",
    :alias "பொய்மையா?"},
   "filter"
   {:arglists ([pred] [pred coll]),
    :resolved true,
    :existing "filter",
    :alias "வடி"},
   "find"
   {:arglists ([map key]),
    :resolved true,
    :existing "find",
    :alias "கண்டுபிடி"},
   "first"
   {:arglists ([coll]),
    :resolved true,
    :existing "first",
    :alias "முதல்"},
   "flatten"
   {:arglists ([x]),
    :resolved true,
    :existing "flatten",
    :alias "தட்டையாக்கு"},
   "fn"
   {:macro true,
    :special-form true,
    :arglists ([& sigs]),
    :resolved true,
    :existing "fn",
    :alias "செயல்கூறு"},
   "for"
   {:macro true,
    :arglists ([seq-exprs body-expr]),
    :resolved true,
    :existing "for",
    :alias "ஒன்றொன்றுக்கு"},
   "get"
   {:arglists ([map key] [map key not-found]),
    :resolved true,
    :existing "get",
    :alias "பெறு"},
   "hash-map"
   {:arglists ([] [& keyvals]),
    :resolved true,
    :existing "hash-map",
    :alias "புலவெண்-விவரணையாக்கம்"},
   "hash-set"
   {:arglists ([] [& keys]),
    :resolved true,
    :existing "hash-set",
    :alias "புலவெண்-அமைவு"},
   "identity"
   {:arglists ([x]),
    :resolved true,
    :existing "identity",
    :alias "அடையாளம்"},
   "if" {:special-form true, :existing "if", :alias "எனில்"},
   "if-not"
   {:macro true,
    :arglists ([test then] [test then else]),
    :resolved true,
    :existing "if-not",
    :alias "இல்லெனில்"},
   "inc"
   {:arglists ([x]), :resolved true, :existing "inc", :alias "ஏற்று"},
   "interleave"
   {:arglists ([] [c1] [c1 c2] [c1 c2 & colls]),
    :resolved true,
    :existing "interleave",
    :alias "பின்னு"},
   "interpose"
   {:arglists ([sep] [sep coll]),
    :resolved true,
    :existing "interpose",
    :alias "இடைபொருத்து"},
   "keep"
   {:arglists ([f] [f coll]),
    :resolved true,
    :existing "keep",
    :alias "கொள்"},
   "last"
   {:arglists ([coll]),
    :resolved true,
    :existing "last",
    :alias "கடைசி"},
   "let"
   {:macro true,
    :special-form true,
    :arglists ([bindings & body]),
    :resolved true,
    :existing "let",
    :alias "வைத்துக்கொள்"},
   "list"
   {:arglists ([& items]),
    :resolved true,
    :existing "list",
    :alias "பட்டியல்"},
   "loop"
   {:macro true,
    :special-form true,
    :arglists ([bindings & body]),
    :resolved true,
    :existing "loop",
    :alias "சுற்று"},
   "map"
   {:arglists
    ([f] [f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]),
    :resolved true,
    :existing "map",
    :alias "விவரி"},
   "next"
   {:arglists ([coll]),
    :resolved true,
    :existing "next",
    :alias "அடுத்த"},
   "not"
   {:arglists ([x]), :resolved true, :existing "not", :alias "அன்று"},
   "or"
   {:macro true,
    :arglists ([] [x] [x & next]),
    :resolved true,
    :existing "or",
    :alias "அல்லது"},
   "print"
   {:arglists ([& more]),
    :resolved true,
    :existing "print",
    :alias "அச்சிடு"},
   "println"
   {:arglists ([& more]),
    :resolved true,
    :existing "println",
    :alias "வரி-அச்சிடு"},
   "range"
   {:arglists ([] [end] [start end] [start end step]),
    :resolved true,
    :existing "range",
    :alias "வீச்சு"},
   "reduce"
   {:arglists ([f coll] [f val coll]),
    :resolved true,
    :existing "reduce",
    :alias "இறுக்கு"},
   "remove"
   {:arglists ([pred] [pred coll]),
    :resolved true,
    :existing "remove",
    :alias "அகற்று"},
   "rest"
   {:arglists ([coll]),
    :resolved true,
    :existing "rest",
    :alias "மீதி"},
   "reverse"
   {:arglists ([coll]),
    :resolved true,
    :existing "reverse",
    :alias "புரட்டு"},
   "second"
   {:arglists ([x]),
    :resolved true,
    :existing "second",
    :alias "இரண்டாம்"},
   "seq"
   {:arglists ([coll]),
    :resolved true,
    :existing "seq",
    :alias "வரிசை"},
   "set"
   {:arglists ([coll]),
    :resolved true,
    :existing "set",
    :alias "அமைவு"},
   "some"
   {:arglists ([pred coll]),
    :resolved true,
    :existing "some",
    :alias "எதாவது"},
   "str"
   {:arglists ([] [x] [x & ys]),
    :resolved true,
    :existing "str",
    :alias "தொடை"},
   "take"
   {:arglists ([n] [n coll]),
    :resolved true,
    :existing "take",
    :alias "எடு"},
   "take-while"
   {:arglists ([pred] [pred coll]),
    :resolved true,
    :existing "take-while",
    :alias "எடு-என்னும்வரை"},
   "true" {:special-form true, :existing "true", :alias "வாய்மை"},
   "true?"
   {:arglists ([x]),
    :resolved true,
    :existing "true?",
    :alias "உண்மையா?"},
   "when"
   {:macro true,
    :arglists ([test & body]),
    :resolved true,
    :existing "when",
    :alias "என்னும்போது"},
   "when-not"
   {:macro true,
    :arglists ([test & body]),
    :resolved true,
    :existing "when-not",
    :alias "இல்லென்னும்-போது"}}}}
